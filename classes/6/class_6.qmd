---
title: "Biologia della Conservazione"
subtitle: "Class 6 - $N_{e}$ and Population structure"
date: "2024-11-21"
footer:  "[Biologia della conservazione 24/25 - Giuliano Colosimo, PhD](https://giulianocolosimo.github.io/biologia_della_conservazione_24-25/)"
logo: ../../figures/Tor-Vergata_logo_cmyk.png
format: 
  revealjs:
    width: 1600
    height: 900 
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    preview-links: true
    chalkboard: 
      boardmarker-width: 5
editor: visual
from: markdown+emoji
execute:
  freeze: auto
editor_options: 
  chunk_output_type: console
bibliography: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/comprehensive_database.bib
csl: /Users/giulianocolosimo/Library/CloudStorage/ProtonDrive-giuliano.colosimo@protonmail.com/manuscripts/literature/bibtex/apa_5th_edition.csl
citation_package: biblatex
citecolor: "red"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
x <- c("DT", "tidyverse", "RColorBrewer", "learnPopGen")
lapply(x, require, character.only = T)
rm(x)
```

## Genetic Drift

### Simulating the average time of allele fixation in our example

```{r drift4, cache=TRUE, fig.align='center'}
#| code-fold: true
#| code-summary: "Show the code"
# simulare il tempo medio di fissazione degli alleli
pop.ls <- list(geneA = c(rep("A",50), rep("a",50)), 
               geneB = c(rep("B",50), rep("b",50)),
               geneC = c(rep("C",50), rep("c",50)))


# pop.ls  =  lista contenente i geni della popolazione
# num.sim = numero di volte la simulazione deve girare
sim.gen2fix <- function (pop.ls, num.sims) {
  
  # numero totale di loci per ogni gene   
  n <- length(pop.ls[[1]])
  # numero di geni differenti nella popolazione
  n.genes <- length(pop.ls)
  # lista vuota per i risultati della simulazione
  generations <- vector(mode = "list", length = length(pop.ls))
  for (h in 1:n.genes){
    generations[[h]] <- rep(0, num.sims)
  }
  names(generations) <- names(pop.ls)
  
  # ciclo di simulazione 
  for (i in 1:num.sims) {
    temp.pop.ls <- pop.ls
    for (y in 1:n.genes) {
      while (max(table(temp.pop.ls[[y]])) < n) {
        temp.pop.ls[[y]] <- sample(temp.pop.ls[[y]],
                                   100, replace = T)
        generations[[y]][i] <- generations[[y]][i] + 1
      }
    }
  }
  
    # statistiche descrittive dei risultati
  df <- rbind(data.frame(lapply(generations, mean)),
        data.frame(lapply(generations, sd))) 
  rownames(df) <- c("mean", "sd")

  # ciclo per plottare i risultati
  # modificare se i geni da plottare sono > 4
  par(mfrow = c(2,2))
  for (z in 1:n.genes) {
    graph <- generations[[z]]
    hist(graph, 
         main = paste("Num. of generations to fix ",
                             names(generations[z])),
         xlab = "Generations")
    abline(v=mean(graph), lwd=2, lty=2, col="red")
  }
  
  #return(df)
}

sim.gen2fix(pop.ls, 5000)
```


## Size matters

```{r drift5, echo=FALSE}
alleles <- c("A","a")

n_sizes <- c(5,10,20,50,100,500,1000)

df <- data.frame(N = rep(n_sizes, each=50),
                 Freq_A = NA,
                 Freq_a = NA)

for(row in 1:nrow(df)) {
  # selezione casuale di alleli 
  a <- sample(alleles, size=df$N[row], replace = T)
  # find the frequency
  f <- sum(a == "A") / length(a)
  # assign it back to the data.frame
  df$Freq_A[row] <- f
  df$Freq_a[row] <- 1-f
}

df_mean_freq_N <- df %>% 
  group_by(as.factor(N)) %>% 
  summarise(A = mean(Freq_A),
            a = mean(Freq_a))

df_sd_freq_N <- df %>% 
  group_by(as.factor(N)) %>% 
  summarise(A = sd(Freq_A),
            a = sd(Freq_a))

df_mean_freq_N_mtrx <- as.matrix(df_mean_freq_N[,2:3])
rownames(df_mean_freq_N_mtrx) <- c(5,10,20,50,100,500,1000)

df_sd_freq_N_mtrx <- as.matrix(df_sd_freq_N[,2:3])
rownames(df_sd_freq_N_mtrx) <- c(5,10,20,50,100,500,1000)

#A function to add arrows on the chart
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
  arrows(x,y+upper, x, y-lower, 
         angle=90, code=3, length=length, ...)
}

df_mean_freq_N_mtrx.blt <-barplot(df_mean_freq_N_mtrx, 
                                  beside = T, 
        ylim = c(0,1), 
        col = rev(brewer.pal(7, "Blues")),
        xlab = "Alleles",
        ylab = "Frequency")
legend("top", legend = c(5,10,20,50,100,500,1000),
       fill = rev(brewer.pal(7, "Blues")), 
       title = "N", horiz = T)
lines(x = seq(0, 16, 1), y = rep(0.5, 17),
      lty = 2, col = "red", lwd = 3)
error.bar(df_mean_freq_N_mtrx.blt, df_mean_freq_N_mtrx, 
          df_sd_freq_N_mtrx)
```

## Population size

> There can be no doubt that genetic variation is related to population size, as @Soule1973 proposed. Small population size reduces the evolutionary potential of wildlife species [@Frankham1996].

-   The importance of maintaining a large population size is pretty intuitive, but may not be enough!
-   Many populations of insects and small mammals naturally fluctuate in their "census" population size, but it is when they are at their minimum that the genetic processes affect them the most
-   Often the census population counts juveniles and senescent individuals that do not really contribute to the reproductive output of next generations
-   Within adult and reproductive individuals there may be significant variance in the number of offspring sired by males and females

------------------------------------------------------------------------

-   Different reproductive strategies (monogamy VS. polygamy) may as well influence the genetic output generation after generation
-   Therefore it is necessary to distinguish between census population and an hypothetical idealized population
-   We can standardize this concept of idealized population by describing it in term of **effective population size** ($N_e$), and it can be defined as the actual number of breeding individuals needed in order to see the same variation of a critical parameter (such as genetic diversity) measured in the real population
-   The effective size of a population determines the rate of change in composition of a population caused by genetic drift (the random sampling of genetic variants) [@Charlesworth2009a, p. 195]
-   We hereby introduce another model that is extremely useful in population and conservation genetics: the Wright-Fisher population model [@Wright1931]

## Wright-Fisher population model

Assumptions of the model:

-   All individuals in the population are considered adults and capable of breeding
-   Individuals are hermafroditic (self fertilization is possible)
-   The number of breeding individuals is constant in all generations and they breed randomly
-   New individuals are formed each generation by random sampling, with replacement, of the gametes from the parents
-   The parents die after mating so each generation is only composed by new individuals (discrete generations)
-   There is no selection at any life stage and mutation is ignored
-   When $N$ is sufficiently large this means that each individual contributes to the next generation a number of offspring that is approximated by a Poisson distribution

------------------------------------------------------------------------

## The Wright-Fisher model used in wild populations

-   Any characteristic of a real population that deviates from the characteristic of the ideal population will make the census size $N$ to be different than the effective population size $N_e$
-   An important measure in conservation is the ratio $\frac{N_e}{N}$
-   There are multiple evidence that in most natural population this ratio is usually much less than 1
-   The primary factors in natural populations that are influencing this ratio are:
    -   fluctuating population size over multiple generations
    -   high variance in family size
    -   unequal ratios between sexes
-  Demographic and genetic approaches to estimate $N_e$


## Estimating $N_e$: Unequal sex ratio

-   What is the size of the ideal population that will lose heterozygosity at the same rate of the real population that has unequal sex ratio?
-   When selfing is not permitted, gametes in the progeny cannot come from the same individual, therefore the effective population size in a population with separate sexes is equal to the probability that the gametes in the progeny comes from the same grandparent.
-   The probability that the two uniting gametes in an individual will come from the same male (or female) grandparent is $\frac{1}{4}$.
-   One-half of the time uniting gametes will come from a grandmother and a grandfather, and 1/4 of the time both gametes will come from the same grandparent [@Allendorf2022].
-   Therefore, the combined probability that both gametes come from the same grandparent is $\frac{1}{4}*\frac{1}{N_m}= \frac{1}{4N_m}$ for grandfathers and $\frac{1}{4}*\frac{1}{N_f}= \frac{1}{4N_f}$ for grandmothers.

------------------------------------------------------------------------

-   Putting everything together, we can conclude that the combined probability of inheriting both gametes from the same grandparent is

$$
\label{uneqsex}
\tag{6.1}
\frac{1}{N_e}=\frac{1}{4N_f}+\frac{1}{4N_m}  
$$

-   We can solve this equation and get to $N_e$:

$$
\label{uneqsex_bis}
\tag{6.2}
N_e=\frac{4N_{f}N_{m}}{N_{f}+N_{m}}
$$


-   In many natural populations of species that are harvested for food one of the two sexes is generally more abundantly hunted, and this can produce a highly skewed sex ratio [@Lamb2010].

------------------------------------------------------------------------

-   According to @Donald2007 there usually is an excess of females in mammals and a deficiency in males


![Effects of unequal sex ratio on $N_e/N$. After @Frankham2010, p.249](./unequalsexratio.jpg){width="250"}

------------------------------------------------------------------------

## Estimating $N_e$: Unequal probability of producing offspring

-   In real populations parents very rarely have the same probability of producing offspring.
-   This variation results in a greater proportion of the progeny being produced by a smaller group of individuals compared to the number of adults potentially able to reproduce [@Allendorf2022].
-   We can model the non-random progeny contribution using @Wright1939.
-   Lets imagine a population of $N$ individuals each contributing a varying number $k$ of gametes to the next generation of the same size ($N$). The mean number of gametes contributed by individual is $\bar{k}=2$. We can calculate the variance associated to this number using

$$
\label{varOffsp}
\tag{6.3}
V_k = \frac{\sum_{i=1}^N (k_i-2)^2}{N}
$$

------------------------------------------------------------------------

-   The proportion of cases in which two random gametes will come from the same parent is then

$$
\label{varOffsp2}
\tag{6.4}
\frac{\sum_{i=1}^N k_i(k_i-1)}{2N(2N-1)}=\frac{2+V_k}{4N-2}
$$

-   By now we know that the effective population size can be intended as the reciprocal of the probability that two gametes come from the same parent, and we can rewrite this equation accordingly

$$
\label{varOffsp3}
\tag{6.5}
N_e=\frac{4N-2}{2+V_k}
$$

------------------------------------------------------------------------

-   Random variation of $k$ will produce a distribution that approximates the Poisson's (i.e., with mean equal to the variance)
-   Thus, $V_k = \bar{k} = 2$ and $N_e = N$ for the idealized population
-   As $V_k$ increases, the effective population size decreases
-   An interesting result is that the effective population size will be larger than the actual population size if $V_k < 2$
-   In captive breeding where we can control reproduction, we may nearly double the effective population size by making sure that all individuals contribute equal number of progeny [@Allendorf2022]

------------------------------------------------------------------------

::::: columns
::: {.column width="50%"}
-   Three hypothetical populations of constant size N = 10. In **A**, only one pair of mates reproduces successfully. In **B**, each of the five pairs produces two offspring (no variance in reproductive success). **C** presents intermediate variance

![](./class_8_2.png)
:::

::: {.column width="50%"}
-   Estimation of effective population size for populations in previous table with high, low, and intermediate variability in family size. $N_e$ is estimated using equation \ref{varOffsp3}

![](./class_8_3.png)
:::
:::::

------------------------------------------------------------------------

## Estimating $N_e$: Fluctuating population size

-   The rate of loss of heterozygosity ($\frac{1}{2N}$) is the reciprocal of the population size ($\frac{1}{N}$)
-   Many generations with reduced population size will influence greatly the loss of heterozygosity and influcence $N_e$.
-   Consider a population that fluctuates in the following way: $N_1 = 100$, $N_2 = 2$, and $N_3 = 100$
-   We can use the armonic mean to calculate the loss of heterozygosity and the effective population size in this situation

$$
\label{fluctPop}
\tag{6.6}
N_e=\frac{t}{\sum_{i=1}^t{(\frac{1}{N_i})}}
$$

$$
N_e=\frac{3}{(\frac{1}{100}+\frac{1}{2}+\frac{1}{100})}=5.77
$$



## Estimating $N_e$: Genetic approaches and the coalescent theory

-   DNA retains information on the evolutionary history of individuals
-   We can use basic probability theory to extrapolate information, including information on $N_e$ from DNA markers
-   The coalescent allows to study the loss of genetic diversity and to use this information to infer effective population size
-   To coalesce means "unite" or "fuse"
-   To better understand this approach we can look at the example of mitochondrial DNA (mtDNA)
which is haploid, maternally inherited and it does not undergo recombination
-   Coalescent theory provides a powerful framework to study the effects of genetic drift, natural selection, mutation, and gene flow in natural populations [@Allendorf2022; @Rosenberg2002]

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
mtDNAhap <- c("palegreen2", "yellow", "pink",      "darkgreen", "red",
              "steelblue2", "gray9",  "seagreen1", "plum3", "orange")

set.seed(1211)
mtDNAhap1 <- sample(mtDNAhap, size = 10, replace = T)
mtDNAhap2 <- sample(mtDNAhap1, size = 10, replace = T)
mtDNAhap3 <- sample(mtDNAhap2, size = 10, replace = T)
mtDNAhap4 <- sample(mtDNAhap3, size = 10, replace = T)
mtDNAhap5 <- sample(mtDNAhap4, size = 10, replace = T)
mtDNAhap6 <- sample(mtDNAhap5, size = 10, replace = T)
mtDNAhap7 <- sample(mtDNAhap6, size = 10, replace = T)
mtDNAhap8 <- sample(mtDNAhap7, size = 10, replace = T)
mtDNAhap9 <- sample(mtDNAhap8, size = 10, replace = T)
mtDNAhap10 <- sample(mtDNAhap9, size = 10, replace = T)

plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap)
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap1)
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap)
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap2)
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap1)
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap)
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "white", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap3)
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap2)
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap1)
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap)
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Population of constant size ($N$) and discrete generations ($G\\{1,2, ..., i-1, i\\}$). We further simplify the situation by assuming all individuals are potentially reproducing ($N = N_e$)."}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = mtDNAhap10,
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap9)
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap8)
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap7)
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap6)
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap5)
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap4)
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap3)
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap2)
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap1)
points(x=1:10, y=rep(11, 10), pch=21, cex=2.7, col = "black",
       bg= mtDNAhap)
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 11, labels = expression('Past (t'[0]*')'))
text(x = 11.5, y = 11, labels = expression('G'[0]))
text(x = 11.5, y = 10, labels = expression('G'[1]))
text(x = 11.5, y = 9, labels = expression('G'[2]))
text(x = 11.5, y = 7, labels = ":")
text(x = 11.5, y = 6, labels = ":")
text(x = 11.5, y = 5, labels = ":")
text(x = 11.5, y = 2, labels = expression('G'[i-1]))
text(x = 11.5, y = 1, labels = expression('G'[i]))
```

------------------------------------------------------------------------

```{r echo = F, fig.align='center', fig.cap="Tracing back the Most Recent Common Ancestor"}
plot(x=1:10, y=rep(1,10), pch=21, cex=2.7, col = "black",
     bg = c("green", "green", "white", "green", "green", "white", "green", "white", "green", "white"),
     ylim = c(0, 11), asp = 1, frame.plot = F, ann = F, axes = F)
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, col = "black",
       bg= c("green", "white", "green", "white", "green", "white", "green", "white", "green", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("green", "white", "green", "white", "green", "white", "white", "green", "green", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, col = "black",
       bg= c("green", "white", "green", "white", "white", "green", "white", "green", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "green", "white", "white", "green", "white", "green", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "green", "white", "white", "green", "white", "green", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "white", "white", "green", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "white", "green", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "green", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "white", "green", "white", "white", "white", "white", "white", "white"))
text(x = -1.5, y = 1, labels = expression('Present (t'[i]*')'))
text(x = -1, y = 10, labels = expression('Past (t'[0]*')'))
text(x = 4, y = 11, labels = "MRCA")


lines(x = c(1,1,1,1,2,2,3,3,3,4), y = c(1,2,3,4,5,6,7,8,9,10))
lines(x = c(2,3,3,3,2,2,3,3,3,4), y = c(1,2,3,4,5,6,7,8,9,10))
lines(x = c(4,5,5,6,5,5,6,5,4,4), y = c(1,2,3,4,5,6,7,8,9,10))
lines(x = c(5,5,5,6,5,5,6,5,4,4), y = c(1,2,3,4,5,6,7,8,9,10))
lines(x = c(7,7,8,8,7,7,6,5,4,4), y = c(1,2,3,4,5,6,7,8,9,10))
lines(x = c(9,9,9,8,7,7,6,5,4,4), y = c(1,2,3,4,5,6,7,8,9,10))

points(x=1:10, y=rep(1,10), pch=21, cex=2.7, 
       col = "black",
       bg= c("green", "green", "white", "green", "green", "white", "green", "white", "green", "white"))
points(x=1:10, y=rep(2, 10), pch=21, cex=2.7, 
       col = c("black", "black", "black", "black", "red", "black", "black", "black", "black", "black"),
       bg= c("green", "white", "green", "white", "green", "white", "green", "white", "green", "white"))
points(x=1:10, y=rep(3, 10), pch=21, cex=2.7, col = "black",
       bg= c("green", "white", "green", "white", "green", "white", "white", "green", "green", "white"))
points(x=1:10, y=rep(4, 10), pch=21, cex=2.7, 
       col = c("black", "black", "black", "black", "black", "black", "black", "red", "black", "black"),
       bg= c("green", "white", "green", "white", "white", "green", "white", "green", "white", "white"))
points(x=1:10, y=rep(5, 10), pch=21, cex=2.7, 
       col = c("black", "red", "black", "black", "black", "black", "black", "black", "black", "black"),
       bg= c("white", "green", "white", "white", "green", "white", "green", "white", "white", "white"))
points(x=1:10, y=rep(6, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "green", "white", "white", "green", "white", "green", "white", "white", "white"))
points(x=1:10, y=rep(7, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "white", "white", "green", "white", "white", "white", "white"))
points(x=1:10, y=rep(8, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "white", "green", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(9, 10), pch=21, cex=2.7, col = "black",
       bg= c("white", "white", "green", "green", "white", "white", "white", "white", "white", "white"))
points(x=1:10, y=rep(10, 10), pch=21, cex=2.7, 
       col = c("black", "black", "black", "red", "black", "black", "black", "black", "black", "black"),
       bg= c("white", "white", "white", "green", "white", "white", "white", "white", "white", "white"))
```

------------------------------------------------------------------------

-   In a diploid population with $k$ alleles at a neutral locus the average time (expressed in generations) back to the previous coalescent event when there were $k-1$ alleles is expressed with:

$$
\label{coaleNe}
\tag{6.7}
T_k = \frac{4N_e}{k(k-1)}generations
$$

-   The time for all $k$ alleles in the population to coalesce back to one allele is: $4N_e[1-(\frac{1}{k})]$.
-   In a population of $N_e = 50$ with three alleles the expected time to its previous coalescence is:

$$
T_3 = \frac{4*50}{3*2} = 33 \ generations
$$


## Population structure

-   In most species individuals are scattered in local conglomerates that are called *demes* (*i.e.*, local populations or subpopulations)

. . .

::::: columns
::: {.column width="50%"}
![After @Akakaya2007](./class_13_1.png)
:::

::: {.column width="50%"}
![After @Frankham2010](./class_13_2.jpg)
:::
:::::

## Population structure

-   A metapopulation is defined as a set of discrete populations (demes) of the same species, in the same general geographical area, potentially able to exchange individuals through migration, dispersal, or human-mediated movement [@Akakaya2007; @Hanski1997]

-   This subdivision (or structure) of populations can be natural and/or human driven

-   Regardless of the cause, the existence of population structure in many species forces us to think at the genetic variation within a species at two primary levels:

    1.  Genetic variation within local demes.
    2.  Genetic variation bewteen local demes.

-   Not all species are scattered!

## Population structure

![After @Allendorf2022, p. 184](./class_13_3.png)

## Population structure

![Boreal forest distibution in North America. Available [here](https://canadiangeographic.ca/articles/new-framework-identifies-climate-change-refugia-in-boreal-forest/)](./class_13_4.png)

## Population structure

-   Even in the absence of barriers to gene flow, genetic differences can accrue so that individuals that are very distant from each other may present significant differences at the genetic level: isolation by distance

![Variability in the correlation between species genetic diversity and geographic distance. ranges. Modified from @Forbes1999 with additional unpublished data from M.K. Schwartz [@Allendorf2022].](./class_13_5.png)

## Population structure

-   Describing the patterns and amount of differentiation among demes is of the uttermost importance to develop effective conservation strategies [see for example @Thatte2018].

![Study area in @Thatte2018. Genetically identified tigers as red dots](./class_13_6.png)

## Population structure

-   @Frankham2011 describe the risks of outbreeding depression when translocating individuals from genetically distinct populations to supplement imperiled ones.

. . .

::::: columns
::: {.column width="50%"}
![After @Welch2017.](./class_13_7.png){width="85%"}
:::

::: {.column width="50%"}
![After @Welch2017.](./class_13_8.png){width="83%"}
:::
:::::

## Population structure

![After @Colosimo2021b](./class_13_9.png)

## Population structure

-   Developing priorities for the conservation of a species often requires an understanding of adaptive genetic differentiation among populations [@Allendorf2022].
-   To understand how genetic variation is distributed at different loci within subdivided populations it is necessary to look at different interacting forces like gene flow, genetic drift and natural selection.
-   $F$ statistics [@Wright1931; @Wright1951; @Malecot1948] are undoubtedly the most used indexes to describe genetic differentiation in and between demes.
-   $F$ statistics are, in short, inbreeding coefficients measuring different types of inbreeding at different levels.

## $F$ statistics

-   We recognize three primary coefficients: $F_{IS}$, $F_{IT}$, and $F_{ST}$.
-   $F_{IS}$ measures Hardy--Weinberg departures within local demes.
-   $F_{ST}$ measures divergence in allele frequencies among demes.
-   $F_{IT}$ measures Hardy--Weinberg departures in the metapopulation due to $F_{IS}$ (nonrandom mating within local demes) and $F_{ST}$ (allele frequency divergence among demes).
-   The original $F$ statistics developed by wright focused on loci with only two alleles.
-   @Nei1977 extended these measures to multiple alleles and used a different notation to name what he called *analysis of gene diversity*: $G_{IS}$, $G_{IT}$, and $G_{ST}$. Often the two groups of indexes are used interchangeably.

## $F_{IS}$

This is a measure of departure from HW proportions within local demes.

$$
\label{fis}
\tag{13.1}
F_{IS} = 1-\frac{H_O}{H_S}
$$

where $H_O$ is the observed heterozygosity averaged over all demes while $H_S$ is the expected heterozygosity averaged over all demes. $F_{IS}$ values can range from $-1 \leq 0 \leq 1$, with positive values indicating an excess of homozygotes and negative values indicating an excess of heterozygotes [@Allendorf2022].

## $F_{ST}$

Often called *fixation index*, it is a measure of genetic divergence among demes.

$$
\label{fst}
\tag{13.2}
F_{ST} = 1-\frac{H_S}{H_T}
$$

with $H_T$ as the expected HW heterozygosity if the metapopulation were panmictic, and $H_S$ is the HW proportion of heterozygotes in each separate deme and then averaged over all demes. This measure varies from $0$ (demes all have equal allele frequencies) to $1$ (demes are all fixed for different alleles).

## $F_{IT}$

Measures the departure from HW proportions due to departures from HW proportions within local demes and divergence among demes [@Allendorf2022].

$$
\label{fit}
\tag{13.3}
F_{IT} = 1-\frac{H_O}{H_T}
$$

where $H_O$ is the observed heterozygosity averaged over all demes while $H_T$ is the expected HW heterozygosity if the metapopulation were panmictic.

. . .

-   The fixation indexes described in the previous slides are related by the following expression:

$$
\label{findexrelation}
\tag{13.4}
F_{IT}= F_{IS}+F_{ST}-(F_{IS}*F_{ST})
$$

## Population structure and habitat fragmentation

-   Habitat fragmentation is a combination of two processes: reduction in total area, and the creation of separate islands.
-   Human induced fragmentation and habitat loss is recognized as the main cause of biodiversity loss [@deBaan2013].
-   Habitat fragmentation causes an overall reduction in population size.
-   Habitat fragmentation also causes an overall reduction in gene flow among the patches it creates.
-   Inhospitable, cleared habitat among fragments typically inhibits gene flow. The same goes for roads rivers, water bodies, mountains, or any other artificial or natural barrier [@Colosimo2014, @Riley2006].
-   With restricted gene flow fragmentation is highly deleterious in the long term.
-   Single Large or Several Small [@Frankham2010].

## Population structure and habitat fragmentation

![Fragmentation of Atlantic forest. After @Luci2011](./class_13_10.png)

## Population structure and habitat fragmentation

![Single large (SL) VS several small (SS). After @Frankham2010](./class_13_11.jpg)

## Population structure and habitat fragmentation

Fragmentation happens in two steps:

1.  Initial genetic subdivision of the population.
2.  Cumulative diversification through genetic drift, selection, inbreeding etc. etc. etc.

After an initial fragmentation, different fragments will have different initial allele frequencies. This diversification can be described by the binomial sampling variance ($\sigma_p^2 = \frac{pq}{2N}$) and the smaller the fragment, the higher the variance.

. . .

The degree of differentiation among fragments can be described by partitioning the overall inbreeding into components within and among populations ($F$ statistics).

. . .

We will look at some examples on estimating $F$ statistics from genotype data.

## Population structure and habitat fragmentation

### Gene flow

What is gene flow?

-   Movement of alleles between population due to migration.

The effects of fragmentation on gene flow depend on:

-   Number of population fragments.
-   Distribution of population sizes in the fragments.
-   Distance between fragments.
-   Dispersal ability of the species.
-   Migration rates among fragments.
-   Environment of the matrix among fragments.
-   Times since fragmentation and extinction and recolonization rates across fragments.

## The black footed rock wallaby

::::: columns
::: {.column width="50%"}
![](./class_13_12.jpg){width="20%" fig-align="center"}
:::

::: {.column width="50%"}
![](./class_13_14.jpg){width="50%" fig-align="center"}
:::
:::::

| Location | Prop. of polymorphic loci | Mean \# of alleles | Average heterozygosity |
|------------------|-------------------|------------------|------------------|
| Barrow Island (1) | 0.1 | 1.2 | 0.05 |
| Exmouth (2) | 1.0 | 3.4 | 0.62 |
| Wheatbelt (3) | 1.0 | 4.4 | 0.56 |

-   Data from @Eldridge1999, images after @Frankham2010.

## Example - 1

-   Populations with same allele frequencies. One with random mating the other one with inbreeding.

| Population | $A_1A_1$ | $A_1A_2$ | $A_2A_2$ | Allele Freq | F   | He  |
|------------|----------|----------|----------|-------------|-----|-----|
| 1          | 0.25     | 0.5      | 0.25     | $p=0.5$     | 0   | 0.5 |
|            |          |          |          | $q=0.5$     |     |     |
| 2          | 0.4      | 0.2      | 0.4      | $p=0.5$     | 0.6 | 0.5 |
|            |          |          |          | $q=0.5$     |     |     |

-   $H_O$ observed heterozygosity averaged over all demes.
-   $H_S$ expected heterozygosity averaged over all demes.
-   $H_T$ expected heterozygosity of the metapopulation.
-   $F_{IS} = 1-\frac{H_O}{H_S}$; $F_{IT} = 1-\frac{H_O}{H_T}$; $F_{ST} = 1-\frac{H_S}{H_T}$.

## Example - 2

-   Random mating populations with different allele frequencies.

| Population | $A_1A_1$ | $A_1A_2$ | $A_2A_2$ | Allele Freq | F   | He   |
|------------|----------|----------|----------|-------------|-----|------|
| 1          | 0.25     | 0.5      | 0.25     | $p=0.5$     | 0   | 0.5  |
|            |          |          |          | $q=0.5$     |     |      |
| 2          | 0.04     | 0.32     | 0.64     | $p=0.2$     | 0   | 0.32 |
|            |          |          |          | $q=0.8$     |     |      |

-   $H_O$ observed heterozygosity averaged over all demes.
-   $H_S$ expected heterozygosity averaged over all demes.
-   $H_T$ expected heterozygosity of the metapopulation.
-   $F_{IS} = 1-\frac{H_O}{H_S}$; $F_{IT} = 1-\frac{H_O}{H_T}$; $F_{ST} = 1-\frac{H_S}{H_T}$.

## Example - 3

-   Populations with different allele frequencies, one random mating and one with inbreeding.

| Population | $A_1A_1$ | $A_1A_2$ | $A_2A_2$ | Allele Freq | F   | He   |
|------------|----------|----------|----------|-------------|-----|------|
| 1          | 0.25     | 0.5      | 0.25     | $p=0.5$     | 0   | 0.5  |
|            |          |          |          | $q=0.5$     |     |      |
| 2          | 0.14     | 0.13     | 0.74     | $p=0.2$     | 0.6 | 0.32 |
|            |          |          |          | $q=0.8$     |     |      |

-   $H_O$ observed heterozygosity averaged over all demes.
-   $H_S$ expected heterozygosity averaged over all demes.
-   $H_T$ expected heterozygosity of the metapopulation.
-   $F_{IS} = 1-\frac{H_O}{H_S}$; $F_{IT} = 1-\frac{H_O}{H_T}$; $F_{ST} = 1-\frac{H_S}{H_T}$.

## Example - 4

![$F_{ST}$ increases over generations in fragmented populations at a rate inversely dependent on population size. Values that are $\ge 0.15$ indicate significant differentiation between fragments [@Frankham2010].](./class_13_15.jpg){fig-align="center"}

## Migration and gene flow

-   Migration reduces the impact of fragmentation in a way that is dependent on the rate of gene flow.
-   When is gene flow sufficiently high to prevent the genetic impact of fragmentation?

. . .

::::: columns
::: {.column width="50%"}
-   A single migrant per generation is considered sufficient to prevent differentiation between demes.
-   The migration rate $m$ is the proportion of genes in a population derived from migrants per generation.
-   $Nm$ is the number of migrants per generation [@Frankham2010].
:::

::: {.column width="50%"}
![](./class_13_16.jpg){width="65%" fig-align="center"}
:::
:::::



## References