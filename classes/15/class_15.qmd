---
title: "Biologia della conservazione"
subtitle: "Class 15 - Exercise in R"
date: "2025-01-20"
footer: "[Biologia della conservazione 24/25 - Giuliano Colosimo, PhD](https://giulianocolosimo.github.io/biologia_della_conservazione_24-25/)"
logo: ../../figures/Tor-Vergata_logo_cmyk.png
format: 
  revealjs:
    width: 1600
    height: 900
    theme: slides.scss
    transition: fade
    slide-number: true
    preview-links: true
    chalkboard: 
      boardmarker-width: 5
editor: visual
from: markdown+emoji
execute:
  freeze: auto
editor_options: 
  chunk_output_type: console
bibliography: /Users/giulianocolosimo/Documents/manuscripts/literature/bibtex/comprehensive_database.bib
csl: /Users/giulianocolosimo/Documents/manuscripts/literature/bibtex/apa_5th_edition.csl
citation_package: biblatex
citecolor: "red"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
x <- c("DT", "tidyverse", "RColorBrewer", "learnPopGen",
       "cranlogs", "plotly", "readxl", "hierfstat")
lapply(x, require, character.only = T)
rm(x)
```

## Introduction

- In this exercise we will first briefly look at the very basic of R and RStudio. We will then try to use some functions from various R packages to compute some of the genetic indexes that we have discussed  in the first part of the course

- We will be using a dataset published by @Groombridge2000

- The dataset contains 153 individuals of Kestrel, a small bird of prey, typed at 12 microsatellite loci

- The dataset is available [here](https://drive.proton.me/urls/SHD6SKCV30#RfJOAMMTGpkQ) as an excel file. Download it and place in a directory of your convenience 

- Before moving forward with the excercise I will review some basic **R** stuff, including the installation process and how to retrieve some of the most important packages

## Setting up your computers

-   Connect to Wi-Fi

-   Visit the **R** <https://cran.r-project.org> page and download the **R** version compatible with your OS. Install the software following the instructions

-   Visit the **RStudio** <https://www.rstudio.com/products/rstudio/download/> page and download the **RStudio** Desktop version compatible with your OS. Install the software following the instructions. Most recently **RStudio** has changed its name in to **Posit** <https://posit.co>, but the core idea is the same!

::: callout-important
**RStudio** is an Integrated Development Environment (IDE) within which it should be easier to organize your **R** workflow. [Learning all the specifics of **R** and **RStudio** is beyond the scope of this course and it is a student's responsibility to learn the basics of these tools. That being said, you can always write me with your questions if something does not work on your computer and I will help troubleshooting potential issues.]{.underline}
:::

## Brief intro to R and RStudio

- R is a very powerful programing language. It was conceived for statistical computing, but now it has become a well rounded tool that can be used to do a number of different things, including writing manuscripts and designing websites 

- At its core R can still be considered *number cruncher*

```{r sum}
# basic arithmetic
3 + 5
```

```{r assign_val}
# assigning values to object
a <- 5
b <- 3
(c <- a + b)

```

```{r equation}
# multiple type of data
str(x <- a)
str(y <- "a")
str(z <- c(T, F))
```

------------------------------------------------------------------------

- Data can be organized in a number of different ways each one with its specific structure
- The three most simple "objects" that contain data are vecotrs, matrices, and data frames

```{r matrix}
# a matrix
(mtrx_ex <- matrix(1:9, nrow = 3, ncol = 3))
```

```{r df}
# a data frame
(df_ex <- as.data.frame(mtrx_ex))
```

```{r df2}
# another data frame
(df_ex <- data.frame(id = c(1, 2, 3),
                     species = c("cat", "dog", "lion"),
                     is.domestic = c(T, T, F)))
```

------------------------------------------------------------------------

- When you first install **R** on your computer you will find only a few basic packages that ship with basic installation

- If you type the following command at your prompt you will get a series of information regarding the version of R and the hardware on which is running

- The command will also output information relative to the name of packages installed and loaded in your working session

```{r sI}
sessionInfo() # the output is from my computer and mybe different for you
```

## Packages

- There are thousands of available libraries (aka, *packages*) that can be used to perform very specific analyses and produce publication-grade graphical output.

```{r packs}
sI <- sessionInfo()
sI$basePkgs # look at the basic packages installed and loaded
```

```{r installed_packs}
# The following command provides a list of all packages that are installed
rownames(installed.packages()) # the output is from my computer and mybe different for you
```

------------------------------------------------------------------------


#### How to install new packages

- Most packages can be installed using the following procedure

```{r installnew, include=TRUE, eval=FALSE}
install.packages("ggplot2", repos = "https://cloud.r-project.org")
```

- Once the package has been installed without any error as output, it should be available and can be loaded as a library in your working session

```{r loadpck}
library(ggplot2)
```

- Once the library is loaded it is possible to star using the functions that are contained within the library
- **R** comes with a great help system that everybody is encouraged to read extensively and consult every time they are experiencing issues when running some code or using a function.

```{r help}
?geom_segment
```

## Loading the data in to **R**

- We can read excel files in **R**, but we first need to install and load a specific library that can help us doing that

```{r include=TRUE, eval=FALSE}
install.packages("readxl", repos = "https://cloud.r-project.org")
library(readxl)
```

- Now that the library is loaded we can load the excel file

```{r include=T, eval=F}
kestrel <- read_excel("/PATH/TO/EXCEL/FILE/Groombridge_et_al_genotypes_data.xlsx",
           sheet = 1, col_types = "guess", na = "\\N")
kestrel
```


```{r echo=F, eval=TRUE}
kestrel <- read_excel("../../data/Groombridge_et_al_genotypes_data.xlsx",
           sheet = 1, col_types = "guess", na = "\\N")
kestrel
```

---

- Data is organized in a tibble, a data frame with some extra features when compared to regular data frames

- We can summarize the second and third column to overview the type and number of sample

```{r}
table(kestrel$Species, kestrel$Info)
```

- The results tell us that there are 6 different species of kestrel (and 5 subspecies), coming from various locations. For each species (or subspecies) the number indicates how many samples of that species are in the dataframe

---

- We can now start looking at the actual genetic information. We will be using a package called **hierfstat** [@Goudet2005].

- This package is a little outdated and there are some problems in the way some of the functions in this package handle the data!!!!

- The package, if properly used, it is still pretty valuable and performs many useful analysis

- In today's excercise what you will do is try to modify the format of some data and run a simple function from the package to count the number of alleles in the different populations

- The idea is to try and figure out the issue in the way the data are handled by the function that counts the number of alleles

---

- Install the package and load it in your working session. 

```{r include=T, eval=F}
install.packages("hierfstat")
library(hierfstat)
```

- With the package installation also come a series of example data. We can look at one of the explanatory files to make sure our samples are properly formatted for the analysis

```{r, echo=TRUE}
data(gtrunchier)
gtrunchier
```

---

- The example data contains genotypes at 6 microsatellite loci of *Galba truncatula*, an air-breathing freshwater snail, from different patches in Western Switzerland

- The genotyped microsatellites data are organized so that one column contains 2 alleles. Lets take a look at the first sample in the dataframe. The first 2 columns contain sampling information ([Locality]{style="color: red;"} and [Patch]{style="color: red;"}), while the rest of the column contain the actual genotypes 

```{r}
gtrunchier[1, ]
```

- So, the first individual is homozygous at locus [L21.V]{style="color: blue;"} with two copies of allele [2]{style="color: green;"}

- This individual is actually homozygous for all loci considered here. What is important to note at this stage is that the format of this data frame is slightly different from our data

```{r}
as.data.frame(kestrel[1, ])
```

---

- In our data the two alleles are kept in two separate columns, and each locus has an [_A]{style="color: red;"} and [_B]{style="color: red;"} notation to specify the two different alleles

- So, the first thing to do to start the analysis with *hierfstat* is to modify the format of our data. Basically we need to make a new data frame with one column per locus

- Please note that there are many different ways to achieve this, and what I am showing below is just one of the many available alternatives

```{r}
# We first create an empy matrix that has the as mny rows as  number of samples in our dataset and 
# as many columns as number of genotyped loci
kestrel_df <- matrix(nrow = nrow(kestrel), ncol = length(kestrel[, 4:ncol(kestrel)])/2)
```

- We have just created an empty object and we can now proceed to fill it with the actual data. We can do so using a **for** loop

```{r}
for (i in seq(1, length(kestrel[, 4:ncol(kestrel)]), 2)) {
  for (y in 1:nrow(kestrel)) {
    kestrel_df[y, which(seq(1, length(kestrel[, 4:ncol(kestrel)]), 2) == i)] <- 
      paste(kestrel[, 4:ncol(kestrel)][y, i], kestrel[, 4:ncol(kestrel)][y, i+1], sep = "") 
  }
}
```

---

```{r}
kestrel_df
```

- What we have now is a matrix with two alleles per column, but we are not done yet as we need to add samples information, the name of the loci, and transform everything in a dataframe. Before doing this we need to install and load another package that helps with string manipulations. The package is called **stringr** [@Wickham2023]

```{r include=T, eval=F}
install.packages("stringr")
library(stringr)
```

---

- We can now proceed with adding the names and transforming everything from a matrix to a dataframe

```{r}
rownames(kestrel_df) <- kestrel$ID
colnames(kestrel_df) <- unlist(str_split(colnames(kestrel)[-c(1:3)],
                                                "_"))[seq(1, length(unlist(str_split(colnames(kestrel)[-c(1:3)],
                                                                                     "_"))), 4)]
kestrel_df <- as.data.frame(kestrel_df)
kestrel_df
```

---

- We add the information about the sample provenience and we then simplify the information re the missing data

```{r}
kestrel_df <- cbind(kestrel$Info, kestrel_df)
kestrel_df[kestrel_df == "NANA"] <- "NA"
kestrel_df[,-1] <- sapply(kestrel_df[,-1], as.numeric)
kestrel_df
```

- We can now start using functions from the hierfstat package 

---

- This first function counts the number of alleles by locus and in each population 

```{r}
allele.count(kestrel_df)
```

---

- Examinate the output of the *allele.count()* function. What issues did you notice?


## References